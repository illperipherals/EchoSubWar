package com.tsatsatzu.subwar.game.api;import com.tsatsatzu.subwar.game.data.SWContextBean;import com.tsatsatzu.subwar.game.data.SWOperationBean;import com.tsatsatzu.subwar.game.data.SWPingBean;import com.tsatsatzu.subwar.game.data.SWUserBean;import com.tsatsatzu.subwar.game.logic.CredentialsLogic;import com.tsatsatzu.subwar.game.logic.GameLogic;import com.tsatsatzu.subwar.game.logic.IOLogic;import com.tsatsatzu.subwar.game.logic.SWGameException;import com.tsatsatzu.subwar.game.logic.UserLogic;import com.tsatsatzu.utils.obj.StringUtils;public class SubWarGameAPI{    public static SWContextBean invoke(SWOperationBean op)    {        SWContextBean context = new SWContextBean();        context.setOperation(op);        if (!CredentialsLogic.validateAPIKey(op.getCredentials()))        {            context.setLastOperationError("Invalid Credentials");            return context;        }        SWUserBean user = UserLogic.validate(op.getUserID());        context.setUser(user);        try        {            boolean abort = conductOperation(op, context);            if (abort)                return context;        }        catch (SWGameException e)        {            context.setLastOperationError(e.getMessage());        }        user = context.getUser();        if (user.getInGame() >= 0)            context.setGame(GameLogic.getGameDetails(user.getInGame(), user.getUserID()));        user.setLastInteraction(System.currentTimeMillis());        user.setNumberOfInteractions(user.getNumberOfInteractions() + 1);        IOLogic.saveUser(user);        return context;    }    private static boolean conductOperation(SWOperationBean op,            SWContextBean context) throws SWGameException    {        switch (op.getOperation())        {            case SWOperationBean.ENTER_GAME:                enterGame(context);                break;            case SWOperationBean.MOVE:                move(context);                break;            case SWOperationBean.QUERY_USER:                queryUser(context);                break;            case SWOperationBean.SET_USER_DETAILS:                setUserDetails(context);                break;            case SWOperationBean.MICROPHONE:                useMicrophone(context);                break;            case SWOperationBean.SONAR:                useSonar(context);                break;            case SWOperationBean.TORPEDO:                fireTorpedo(context);                break;            case SWOperationBean.TEST:                test(context);                break;            case SWOperationBean.EXIT_GAME:                exitGame(context);                break;            default:                context.setLastOperationError("Unknown operation: "+op.getOperation());                return true;        }        return false;    }    private static void setUserDetails(SWContextBean context)    {        if (!StringUtils.trivial(context.getOperation().getString1()))            UserLogic.setUserName(context.getUser(), context.getOperation().getString1());        if (!StringUtils.trivial(context.getOperation().getString2()))            UserLogic.setShipName(context.getUser(), context.getOperation().getString2());    }    private static void queryUser(SWContextBean context)    {        // NO-OP. User already retrieved above.    }    private static void useMicrophone(SWContextBean context) throws SWGameException    {        GameLogic.listen(context.getUser());    }    private static void useSonar(SWContextBean context) throws SWGameException    {        GameLogic.ping(context.getUser());    }    private static void fireTorpedo(SWContextBean context) throws SWGameException    {        int dir = context.getOperation().getInt1();        switch (dir)        {            case SWOperationBean.NORTH:            case SWOperationBean.NORTHWEST:            case SWOperationBean.NORTHEAST:            case SWOperationBean.SOUTH:            case SWOperationBean.SOUTHWEST:            case SWOperationBean.SOUTHEAST:            case SWOperationBean.EAST:            case SWOperationBean.WEST:                int[] delta = SWPingBean.directionToDelta(dir);                int hits = GameLogic.fire(context.getUser(), delta[0], delta[1]);                context.setLastOperationMessage(String.valueOf(hits));                break;            default:                context.setLastOperationError("unknown direction "+dir);                break;        }    }        private static void move(SWContextBean context) throws SWGameException    {        int dir = context.getOperation().getInt1();        switch (dir)        {            case SWOperationBean.RAISE:                GameLogic.move(context.getUser(), 0, 0, 1);                break;            case SWOperationBean.LOWER:                GameLogic.move(context.getUser(), 0, 0, -1);                break;            case SWOperationBean.NORTH:            case SWOperationBean.NORTHWEST:            case SWOperationBean.NORTHEAST:            case SWOperationBean.SOUTH:            case SWOperationBean.SOUTHWEST:            case SWOperationBean.SOUTHEAST:            case SWOperationBean.EAST:            case SWOperationBean.WEST:                int[] delta = SWPingBean.directionToDelta(dir);                GameLogic.move(context.getUser(), delta[0], delta[1], 0);                break;            default:                context.setLastOperationError("unknown direction "+dir);                break;        }    }    private static void enterGame(SWContextBean context) throws SWGameException    {        GameLogic.joinGame(context.getUser());    }    private static void exitGame(SWContextBean context) throws SWGameException    {        GameLogic.leaveGame(context.getUser());    }    private static void test(SWContextBean context)    {        switch (context.getOperation().getInt1())        {            case SWOperationBean.TEST_CLEAR_USER:                context.setUser(UserLogic.newInstance(context.getOperation().getUserID()));                break;            case SWOperationBean.TEST_RESET_SEED:                GameLogic.testResetToSeed(context.getOperation().getInt2());                break;            case SWOperationBean.TEST_AI_MOVE:                GameLogic.testAIMove();                break;            default:                throw new IllegalStateException("not implemented yet");        }    }}